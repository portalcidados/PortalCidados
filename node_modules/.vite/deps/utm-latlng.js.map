{
  "version": 3,
  "sources": ["../../utm-latlng/UTMLatLng.js"],
  "sourcesContent": ["/* global UTMLatLng */\r\nvar method = UTMLatLng.prototype;\r\n\r\nvar datumName = \"WGS 84\";\r\nvar a;\r\nvar eccSquared;\r\nvar status = false;\r\nfunction UTMLatLng(datumNameIn) {\r\n    if (datumNameIn !== undefined)\r\n    {\r\n        datumName = datumNameIn;\r\n    }\r\n    this.setEllipsoid(datumName);\r\n}\r\n\r\nmethod.convertLatLngToUtm = function (latitude, longitude,precision)\r\n{\r\n    var ZoneNumber;\r\n    if (this.status)\r\n    {\r\n        return 'No ecclipsoid data associated with unknown datum: ' + datumName;\r\n    }\r\n\r\n    if(!Number.isInteger(precision))\r\n    {\r\n        return 'Precision is not integer number.';\r\n    }\r\n\r\n    latitude = parseFloat(latitude);\r\n    longitude = parseFloat(longitude);\r\n\r\n    var LongTemp = longitude;\r\n    var LatRad = this.toRadians(latitude);\r\n    var LongRad = this.toRadians(LongTemp);\r\n\r\n    if (LongTemp >= 8 && LongTemp <= 13 && latitude > 54.5 && latitude < 58) {\r\n        ZoneNumber = 32;\r\n    } else if (latitude >= 56.0 && latitude < 64.0 && LongTemp >= 3.0 && LongTemp < 12.0) {\r\n        ZoneNumber = 32;\r\n    } else {\r\n        ZoneNumber = ((LongTemp + 180) / 6) + 1;\r\n\r\n        if (latitude >= 72.0 && latitude < 84.0) {\r\n            if (LongTemp >= 0.0 && LongTemp < 9.0) {\r\n                ZoneNumber = 31;\r\n            } else if (LongTemp >= 9.0 && LongTemp < 21.0) {\r\n                ZoneNumber = 33;\r\n            } else if (LongTemp >= 21.0 && LongTemp < 33.0) {\r\n                ZoneNumber = 35;\r\n            } else if (LongTemp >= 33.0 && LongTemp < 42.0) {\r\n                ZoneNumber = 37;\r\n            }\r\n        }\r\n    }\r\n    ZoneNumber = parseInt(ZoneNumber);\r\n\r\n    var LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3;  //+3 puts origin in middle of zone\r\n    var LongOriginRad = this.toRadians(LongOrigin);\r\n\r\n    var UTMZone = this.getUtmLetterDesignator(latitude);\r\n\r\n    var eccPrimeSquared = (this.eccSquared) / (1 - this.eccSquared);\r\n\r\n    var N = this.a / Math.sqrt(1 - this.eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\r\n    var T = Math.tan(LatRad) * Math.tan(LatRad);\r\n    var C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\r\n    var A = Math.cos(LatRad) * (LongRad - LongOriginRad);\r\n\r\n    var M = this.a * ((1 - this.eccSquared / 4 - 3 * this.eccSquared * this.eccSquared / 64 - 5 * this.eccSquared * this.eccSquared * this.eccSquared / 256) * LatRad\r\n        - (3 * this.eccSquared / 8 + 3 * this.eccSquared * this.eccSquared / 32 + 45 * this.eccSquared * this.eccSquared * this.eccSquared / 1024) * Math.sin(2 * LatRad)\r\n        + (15 * this.eccSquared * this.eccSquared / 256 + 45 * this.eccSquared * this.eccSquared * this.eccSquared / 1024) * Math.sin(4 * LatRad)\r\n        - (35 * this.eccSquared * this.eccSquared * this.eccSquared / 3072) * Math.sin(6 * LatRad));\r\n\r\n    var UTMEasting = parseFloat(0.9996 * N * (A + (1 - T + C) * A * A * A / 6\r\n        + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120)\r\n    + 500000.0);\r\n\r\n    var UTMNorthing = parseFloat(0.9996 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24\r\n        + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720)));\r\n\r\n    if (latitude < 0)\r\n        UTMNorthing += 10000000.0;\r\n    UTMNorthing = precisionRound(UTMNorthing,precision);\r\n    UTMEasting = precisionRound(UTMEasting,precision);\r\n    return {Easting: UTMEasting, Northing: UTMNorthing, ZoneNumber: parseInt(ZoneNumber), ZoneLetter: UTMZone};\r\n\r\n\r\n};\r\n\r\n\r\nmethod.convertUtmToLatLng = function (UTMEasting, UTMNorthing, UTMZoneNumber, UTMZoneLetter)\r\n{\r\n    var e1 = (1 - Math.sqrt(1 - this.eccSquared)) / (1 + Math.sqrt(1 - this.eccSquared));\r\n    var x = UTMEasting - 500000.0; //remove 500,000 meter offset for longitude\r\n    var y = UTMNorthing;\r\n    var ZoneNumber = UTMZoneNumber;\r\n    var ZoneLetter = UTMZoneLetter;\r\n    var NorthernHemisphere;\r\n    if(UTMEasting===undefined)\r\n    {\r\n        return \"Please pass the UTMEasting!\";\r\n    }\r\n    if(UTMNorthing===undefined)\r\n    {\r\n        return \"Please pass the UTMNorthing!\";\r\n    }\r\n    if(UTMZoneNumber===undefined)\r\n    {\r\n        return \"Please pass the UTMZoneNumber!\";\r\n    }\r\n    if(UTMZoneLetter===undefined)\r\n    {\r\n        return \"Please pass the UTMZoneLetter!\";\r\n    }\r\n\r\n    if (['N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'].indexOf(ZoneLetter) !== -1) {\r\n        NorthernHemisphere = 1;\r\n    } else {\r\n        NorthernHemisphere = 0;\r\n        y -= 10000000.0;\r\n    }\r\n\r\n    var LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3;  \r\n\r\n    var eccPrimeSquared = (this.eccSquared) / (1 - this.eccSquared);\r\n\r\n    var M = y / 0.9996;\r\n    var mu = M / (this.a * (1 - this.eccSquared / 4 - 3 * this.eccSquared * this.eccSquared / 64 - 5 * this.eccSquared * this.eccSquared * this.eccSquared / 256));\r\n\r\n    var phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu)\r\n    + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu)\r\n    + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\r\n    var phi1 = this.toDegrees(phi1Rad);\r\n\r\n    var N1 = this.a / Math.sqrt(1 - this.eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\r\n    var T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\r\n    var C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\r\n    var R1 = this.a * (1 - this.eccSquared) / Math.pow(1 - this.eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\r\n    var D = x / (N1 * 0.9996);\r\n\r\n    var Lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24\r\n        + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\r\n    Lat = this.toDegrees(Lat);\r\n\r\n    var Long = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1)\r\n        * D * D * D * D * D / 120) / Math.cos(phi1Rad);\r\n    Long = LongOrigin + this.toDegrees(Long);\r\n    return {lat: Lat, lng: Long};\r\n};\r\n\r\n\r\nmethod.getUtmLetterDesignator = function (latitude) {\r\n    latitude = parseFloat(latitude);\r\n    if ((84 >= latitude) && (latitude >= 72))\r\n        return 'X';\r\n    else if ((72 > latitude) && (latitude >= 64))\r\n        return 'W';\r\n    else if ((64 > latitude) && (latitude >= 56))\r\n        return 'V';\r\n    else if ((56 > latitude) && (latitude >= 48))\r\n        return 'U';\r\n    else if ((48 > latitude) && (latitude >= 40))\r\n        return 'T';\r\n    else if ((40 > latitude) && (latitude >= 32))\r\n        return 'S';\r\n    else if ((32 > latitude) && (latitude >= 24))\r\n        return 'R';\r\n    else if ((24 > latitude) && (latitude >= 16))\r\n        return 'Q';\r\n    else if ((16 > latitude) && (latitude >= 8))\r\n        return 'P';\r\n    else if ((8 > latitude) && (latitude >= 0))\r\n        return 'N';\r\n    else if ((0 > latitude) && (latitude >= -8))\r\n        return 'M';\r\n    else if ((-8 > latitude) && (latitude >= -16))\r\n        return 'L';\r\n    else if ((-16 > latitude) && (latitude >= -24))\r\n        return 'K';\r\n    else if ((-24 > latitude) && (latitude >= -32))\r\n        return 'J';\r\n    else if ((-32 > latitude) && (latitude >= -40))\r\n        return 'H';\r\n    else if ((-40 > latitude) && (latitude >= -48))\r\n        return 'G';\r\n    else if ((-48 > latitude) && (latitude >= -56))\r\n        return 'F';\r\n    else if ((-56 > latitude) && (latitude >= -64))\r\n        return 'E';\r\n    else if ((-64 > latitude) && (latitude >= -72))\r\n        return 'D';\r\n    else if ((-72 > latitude) && (latitude >= -80))\r\n        return 'C';\r\n    else\r\n        return 'Z';\r\n\r\n};\r\n\r\nmethod.setEllipsoid = function (name)\r\n{\r\n    switch (name) {\r\n        case 'Airy':\r\n        this.a = 6377563;\r\n        this.eccSquared = 0.00667054;\r\n        break;\r\n        case 'Australian National':\r\n        this.a = 6378160;\r\n        this.eccSquared = 0.006694542;\r\n        break;\r\n        case 'Bessel 1841':\r\n        this.a = 6377397;\r\n        this.eccSquared = 0.006674372;\r\n        break;\r\n        case 'Bessel 1841 Nambia':\r\n        this.a = 6377484;\r\n        this.eccSquared = 0.006674372;\r\n        break;\r\n        case 'Clarke 1866':\r\n        this.a = 6378206;\r\n        this.eccSquared = 0.006768658;\r\n        break;\r\n        case 'Clarke 1880':\r\n        this.a = 6378249;\r\n        this.eccSquared = 0.006803511;\r\n        break;\r\n        case 'Everest':\r\n        this.a = 6377276;\r\n        this.eccSquared = 0.006637847;\r\n        break;\r\n        case 'Fischer 1960 Mercury':\r\n        this.a = 6378166;\r\n        this.eccSquared = 0.006693422;\r\n        break;\r\n        case 'Fischer 1968':\r\n        this.a = 6378150;\r\n        this.eccSquared = 0.006693422;\r\n        break;\r\n        case 'GRS 1967':\r\n        this.a = 6378160;\r\n        this.eccSquared = 0.006694605;\r\n        break;\r\n        case 'GRS 1980':\r\n        this.a = 6378137;\r\n        this.eccSquared = 0.00669438;\r\n        break;\r\n        case 'Helmert 1906':\r\n        this.a = 6378200;\r\n        this.eccSquared = 0.006693422;\r\n        break;\r\n        case 'Hough':\r\n        this.a = 6378270;\r\n        this.eccSquared = 0.00672267;\r\n        break;\r\n        case 'International':\r\n        this.a = 6378388;\r\n        this.eccSquared = 0.00672267;\r\n        break;\r\n        case 'Krassovsky':\r\n        this.a = 6378245;\r\n        this.eccSquared = 0.006693422;\r\n        break;\r\n        case 'Modified Airy':\r\n        this.a = 6377340;\r\n        this.eccSquared = 0.00667054;\r\n        break;\r\n        case 'Modified Everest':\r\n        this.a = 6377304;\r\n        this.eccSquared = 0.006637847;\r\n        break;\r\n        case 'Modified Fischer 1960':\r\n        this.a = 6378155;\r\n        this.eccSquared = 0.006693422;\r\n        break;\r\n        case 'South American 1969':\r\n        this.a = 6378160;\r\n        this.eccSquared = 0.006694542;\r\n        break;\r\n        case 'WGS 60':\r\n        this.a = 6378165;\r\n        this.eccSquared = 0.006693422;\r\n        break;\r\n        case 'WGS 66':\r\n        this.a = 6378145;\r\n        this.eccSquared = 0.006694542;\r\n        break;\r\n        case 'WGS 72':\r\n        this.a = 6378135;\r\n        this.eccSquared = 0.006694318;\r\n        break;\r\n        case 'ED50':\r\n        this.a = 6378388;\r\n        this.eccSquared = 0.00672267;\r\n            break; // International Ellipsoid\r\n            case 'WGS 84':\r\n        case 'EUREF89': // Max deviation from WGS 84 is 40 cm/km see http://ocq.dk/euref89 (in danish)\r\n        case 'ETRS89': // Same as EUREF89 \r\n        this.a = 6378137;\r\n        this.eccSquared = 0.00669438;\r\n        break;\r\n        default:\r\n        this.status = true;\r\n            //   new Error('No ecclipsoid data associated with unknown datum: '.name);\r\n\r\n        }\r\n    };\r\n\r\n    method.toDegrees = function (rad) {\r\n\r\n        return rad / Math.PI * 180;\r\n    };\r\n\r\n    method.toRadians = function (deg) {\r\n\r\n        return deg * Math.PI / 180;\r\n    };\r\n\r\n\r\n    function precisionRound(number, precision) {\r\n      var factor = Math.pow(10, precision);\r\n      return Math.round(number * factor) / factor;\r\n  }\r\n  module.exports = UTMLatLng;\r\n"],
  "mappings": "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",
  "names": []
}
